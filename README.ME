# Wohnwagen Project

A caravan rental application built with Spring Boot backend and React frontend.

## Project Structure

```
wohnwagen-project/
├── backend/                 # Spring Boot application
├── frontend/               # React application
├── docker-compose.common.yml  # Shared Docker Compose configuration
├── docker-compose.yml      # Development environment
├── docker-compose.prod.yml # Production environment
└── DOCKER_COMPOSE_README.md # Docker Compose documentation
```

## Docker Compose Architecture

This project uses Docker Compose's `extends` feature to eliminate code duplication between development and production environments. See [DOCKER_COMPOSE_README.md](DOCKER_COMPOSE_README.md) for detailed documentation.

### Quick Start

**Development:**
```bash
docker-compose up
```

**Production:**
```bash
docker-compose -f docker-compose.prod.yml up
```

## Services

- **frontend**: React application (development: Vite dev server, production: nginx)
- **backend**: Spring Boot REST API
- **postgres**: PostgreSQL database
- **pgadmin**: Database administration interface

## Container Names

Each service has a descriptive container name:
- `caravan-react` - React frontend application
- `caravan-spring` - Spring Boot backend API
- `caravan-postgres` - PostgreSQL database
- `caravan-pgadmin` - PgAdmin database administration

## Environment Variables

Create a `.env` file in the root directory with the following variables:

```env
# Database
POSTGRES_DB=caravan_db
POSTGRES_USER=myuser
POSTGRES_PASSWORD=secret
POSTGRES_PORT=5432

# Backend
BACKEND_PORT=8080
PROD_BACKEND_PORT=8086

# Frontend
FRONTEND_PORT=5173
PROD_FRONTEND_PORT=3080
VITE_API_URL=http://193.33.167.253:8086/api

# PgAdmin
PGADMIN_PORT=5050
PGADMIN_DEFAULT_EMAIL=admin@example.com
PGADMIN_DEFAULT_PASSWORD=supersecurepassword
```

## Development

The development environment includes:
- Hot reloading for frontend (Vite dev server)
- Exposed database ports for local development
- Health checks for backend services
- Local volume mounts for easy development

## Production

The production environment includes:
- Production-optimized builds with nginx for frontend
- Restart policies for reliability
- Persistent named volumes
- Internal-only database access

## Benefits of the New Structure

1. **DRY Principle**: No code duplication between environments
2. **Maintainability**: Changes to common configuration apply to all environments
3. **Clarity**: Environment-specific differences are clearly visible
4. **Consistency**: Ensures all environments use the same base configuration
5. **Consistent Naming**: Same service names across all environments

For more details about the Docker Compose structure, see [DOCKER_COMPOSE_README.md](DOCKER_COMPOSE_README.md).
